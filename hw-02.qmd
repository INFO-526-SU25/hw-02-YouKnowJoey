---
title: "HW 02"
author: "Joey Garcia"
format: 
  html:
    embed-resources: true
toc: true
---

```{r setup and load libraries}
if (!require("pacman")) 
  install.packages("pacman")

pacman::p_load(tidyverse, lubridate, glue, scales, dplyr, ggthemes, # most necessary libs.
               ggridges, # density ridge plots and themes
               dsbox,    # data science in a box (datasets)
               fs,       # filesystem lib.
               janitor,  # clean data
               palmerpenguins
               )       

# set theme for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))

# set width of code output
options(width = 65)

# set figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 7,        # 7" width
  fig.asp = 0.618,      # the golden ratio
  fig.retina = 3,       # dpi multiplier for displaying HTML output on retina
  fig.align = "center", # center align figures
  dpi = 300             # higher dpi, sharper image
)

```

## 1 - A new day, a new plot, a new geom

```{r}
#| label: ridgeline-plot-setup

# Load and test data
airbnb <- dsbox::edibnb
glimpse(airbnb)
summary(airbnb)

```

```{r}
#| label: ridgeline-plot 

# review scores of Edinburgh neighborhoods ridgeline plot
airbnb |>
  filter(between(review_scores_rating, 85, 100)) |> # reduces axis
  filter(!is.na(neighbourhood)) |> # filters empty neighborhood rows
  ggplot(aes(x = review_scores_rating, y = neighbourhood, fill = neighbourhood)) +
  geom_density_ridges(scale = 4, rel_min_height = 0.1) + # scale and cut tail of density
  scale_fill_cyclical(values = c("skyblue1", "cornsilk4")) +
  scale_y_discrete(expand = c(0, 0)) + 
  scale_x_continuous(expand = c(0, 0)) + # reduces padding
  coord_cartesian(clip = "off") +
  labs(
    title = "Ridgeline plot", 
    subtitle = "listings from Airbnb in Edinburgh, Scotland",
    x = "Review Score Ratings",
    y = "Edinburgh\nNeighborhoods", 
    caption = "Source: From Opensource dataset dsbox known as 'edibnb'."
  )+
  theme_ridges()

```

## 2 - Foreign Connected PACs

```{r}
#| label: Foreign-connected-pac-data-cleaning
# get a list of files with "Foreign Connected PAC" in their names
list_of_files <- dir_ls(path = "data", regexp = "Foreign Connected PAC")

# read all files and row bind them
# track file name with column called year
pac <- read_csv(list_of_files, id = "year")

# Clean data
pac <- pac |>
  # Normalize names
  clean_names() |>
  
  # year into <int> 
  mutate(year = str_extract(year, "(?<=-)\\d{4}")) |>
  
  # separate columns by delimiter
  separate(country_of_origin_parent_company,
           into = c("country_of_origin", "parent_company"),
           sep = "/"
           ) |>
  
  # Change data type to <dbl>
  mutate(total = as.numeric(gsub("[$,]", "", total))) |>
  mutate(dems = as.numeric(gsub("[$,]", "", dems))) |>
  mutate(repubs = as.numeric(gsub("[$,]", "", repubs))) |>
  
  # pivot longer by "party"
  pivot_longer(cols = c("dems", "repubs"),
               names_to = "party",
               values_to = "amount"
               ) |>
  # rename columns
  mutate(party = recode(party, dems = "Democrat",repubs = "Republican"))

unique(pac$country_of_origin)
```


```{r}
#| label: Foreign-connected-pac-UK-contributions

pac |>
  filter(country_of_origin == "UK") |>
  # Group & summarize total contributions
  group_by(year, party) |>
  summarise(total_contributions = sum(amount), .groups = "drop") |>
  
  ggplot(aes(x = year, y = total_contributions, colour = party, group = party)) +
  geom_line(size = 1) +
  scale_color_manual(values = c("Democrat" = "blue", "Republican" = "red")) +
  scale_y_continuous(labels = dollar_format(scale = 1e-6, suffix = "M")) +
  labs(
    title = "Contributions to US political parties from UK connected PACs",
    x = "Year",
    y = "Total Amount",
    colour = "Party",
    caption = "Source: OpenSecrets.org"
  ) +
  theme_minimal() +
  theme(
    axis.title.y = element_text(hjust = 0),
    axis.title.x = element_text(hjust = 0),
    legend.position = c(0.95, 0.05),
    legend.justification = c("right", "bottom")
  )
```

``` {r}
#| label: Foreign-connected-pac-Israel-contributions

pac |>
  filter(country_of_origin == "Spain") |>
  # Group & summarize total contributions
  group_by(year, party) |>
  summarise(total_contributions = sum(amount), .groups = "drop") |>
  
  ggplot(aes(x = year, y = total_contributions, colour = party, group = party)) +
  geom_line(size = 1) +
  scale_color_manual(values = c("Democrat" = "blue", "Republican" = "red")) +
  scale_y_continuous(labels = dollar) +
  labs(
    title = "Contributions to US political parties from Spain connected PACs",
    x = "Year",
    y = "Total Amount",
    colour = "Party",
    caption = "Source: OpenSecrets.org"
  ) +
  theme_minimal() +
  theme(
    axis.title.y = element_text(hjust = 0),
    axis.title.x = element_text(hjust = 0),
    legend.position = c(0.95, 0.65),
    legend.justification = c("right", "bottom")
  )
```

### Foreign Connected PACs interpretation (Spain)

Spain connected PACs initially contributed the majority of the contributions to the Republican Party. During the 2020 US election year, the paradigm shifted and the Democrat Party received the majority of the contributions. As we move into 2022, we start to see more contributions going to the Democrat Party.  

## 3 - Median housing prices in the US

```{r}
#| label: Median-house-recession-data-cleaning

median_housing <- read.csv(file = "data/median-housing.csv")

recessions <-read.csv(file = "data/recessions.csv")


recessions <- recessions |>
  # Change data type to <date>
  mutate(Peak = ymd(Peak)) |>
  mutate(Trough = ymd(Trough))

median_housing <- median_housing |>
  # Change data type to <date>
  mutate(DATE = ymd(DATE)) |>
  # rename columns
  rename(
    date = DATE,
    price = MSPUS
  ) |>
  # create binary classification of recession peaks and troughs
  mutate(
    in_recession = map_lgl(
      date, ~ any(.x >= recessions$Peak & .x <= recessions$Trough)
      )
    )
```

``` {r}
#| label:  Median-house-plot

median_housing |>
  ggplot(aes(x = date, y = price)) +
  geom_line(size = 1, colour = "blue2") +
  # Format x axis scale
  scale_x_date(
    breaks = seq(as.Date("1965-01-01"), as.Date("2020-01-01"), by = "5 year"),
    date_labels = "%Y"
  ) +
  # Format y axis scale
  scale_y_continuous(
    labels = dollar_format(prefix = ""),
    breaks = seq(0, 400000, by = 40000)
  ) +
  labs(
    title = "Median sales price of houses sold in the United States",
    subtitle = "Not seasonally adjusted",
    x = NULL,
    y = "Dollars",
    caption = "Sources: Census; HUD"
  ) + 
  theme_minimal() +
  # configure grids and title position
  theme(
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    panel.grid.minor.y = element_blank(),
    plot.title.position = "plot",
    plot.title = element_text(hjust = 0),
    plot.subtitle = element_text(hjust = 0)
  )

```

``` {r}
#| label: Median-house-recession-plot

recession_periods <- tibble(
  start = median_housing$date[starts],
  end = median_housing$date[ends],
  in_recession = rle_rec$values
  ) |> 
  filter(in_recession)


median_housing |>
  ggplot(aes(x = date, y = price)) +
  geom_line(size = 1, colour = "blue2") +
  geom_rect(
    data = recession_periods_adjusted,
    aes(xmin = start, xmax = end, ymin = -Inf, ymax = Inf),
    inherit.aes = FALSE,
    fill = "gray",
    alpha = 0.3
  ) +
  # Format x axis scale
  scale_x_date(
    breaks = seq(as.Date("1965-01-01"), as.Date("2020-01-01"), by = "5 year"),
    date_labels = "%Y"
  ) +
  # Format y axis scale
  scale_y_continuous(
    labels = dollar_format(prefix = ""),
    breaks = seq(0, 400000, by = 40000)
  ) +
  labs(
    title = "Median sales price of houses sold in the United States",
    subtitle = "Not seasonally adjusted",
    x = NULL,
    y = "Dollars",
    caption = "Sources: Census; HUD"
  ) + 
  theme_minimal() +
  # configure grids and title position
  theme(
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    panel.grid.minor.y = element_blank(),
    plot.title.position = "plot",
    plot.title = element_text(hjust = 0),
    plot.subtitle = element_text(hjust = 0)
  )

```

``` {r}
#| label: Median-house-2019-2020-Quarter-plot

median_housing <- median_housing |>
  mutate(year = year(date),
         quarter = quarter(date),
         year_quarter = paste0("Q", quarter, "\n", year), 
         year_quarter = factor(year_quarter, levels = unique(year_quarter))
  )

median_housing |>
  filter(year(date) %in% c(2019, 2020)) |>
  ggplot(aes(x = year_quarter, y = price, group = 1)) +
  geom_line(size = 1, color = "skyblue3") +
  geom_point(color = "skyblue3", fill = "white", stroke = 1.2, shape = 21) +
  scale_x_discrete(
    labels = c('Q1', 'Q2', 'Q3', 'Q4', 'Q1', 'Q2', 'Q3', 'Q4'),
    expand = c(0, 0)
    ) +
  scale_y_continuous(
    limits = c(280000, 360000),
    labels = dollar_format(prefix = ""),
    breaks = seq(300000, 360000, by = 20000),
    expand = c(0.01, 0)
  ) +
  labs(
    title = "Median sales price of houses sold in the United States",
    subtitle = "Not seasonally adjusted",
    x = NULL,
    y = "Dollars"
  ) +
  # Place the 2019 and 2020 labels
  annotate(
    "text", 
    x = 2.5, 
    y = 290000, 
    label = "2019", 
    size = 4
  ) +
  annotate(
    "text", 
    x = 6.5, 
    y = 290000, 
    label = "2020", 
    size = 4
  ) +
  theme_minimal() +
  # configure title position
  theme(
    plot.title.position = "plot",
    plot.title = element_text(hjust = 0),
    plot.subtitle = element_text(hjust = 0),
    plot.margin = margin(t = 10, r = 10, b = 30, l = 10) # bottom padding; x labels
  ) +
  coord_cartesian(ylim = c(300000, 360000), clip = "off") # allows annotation to be below x labels

```

## 4 - Expect More. Plot More.

### Approach

For the target iconic symbol, I plan to stack 3 circles on top of each other. The colors from largest to smallest will be red, white, then red. The text "Target" will be an annotation. Lastly, we will have an annotated circle with red as the color and fill equaling white; we will place a red 'R' over the shape prevviously described.

The color red for the target coroporation is "#CC0000" and this was found at the website here [https://www.brandcolorcode.com/target].

```{r}
#| label: target-symbol-recreation

# Create 3 circles
target <- tibble(
  x = rep(0, 3), # replicate
  y = rep(0, 3),
  size = c(75, 50, 25),
  fill = c("#CC0000", "white", "#CC0000"),
  stroke = c(0, 0, 0)
)

target |>
  ggplot(aes(x = x, y = y)) +
  geom_point(aes(size = size, fill = fill), 
             shape = 21, 
             color = "#CC0000", 
             stroke = 1.1) +
  # 'Target' label
  annotate(
    "text", 
    x = 0, 
    y = 0, 
    label = "Target",
    color = "#CC0000",
    size = 8,
    fontface = "bold",
    vjust = 7,
    hjust = .6
  ) +
  # Registered Trademark circle
  annotate(
    "point",
    x = 1, 
    y = -4,
    shape = 21,
    size = 5,
    fill = "white",
    color = "#CC0000",
    stroke = 1
  ) +
  # 'R' label
  annotate(
    "text", 
    x = 1, 
    y = -4, 
    label = "R",
    color = "#CC0000",
    size = 3,
    fontface = "bold",
    vjust = .4,
    hjust = .5
  ) +
  scale_size_identity() + # keep size
  scale_fill_identity() + # keep color
  coord_cartesian(        # Adjustable coordinate system
    xlim = c(-6, 6),
    ylim = c(-5, 4),
    clip = "off") +
  theme_void()            # white background

```

## 5 - Mirror, mirror on the wall, who’s the ugliest of them all?

```{r}
#| label: ugliest-of-them-all-plot

penguins |>
  ggplot(aes(x = flipper_length_mm, fill = species)) +
  geom_density(alpha = 0.7) +
  facet_wrap(~ island) +
  scale_fill_manual(
    values = c(
      "Adelie" = "#FF00FF",
      "Chinstrap" = "#00FFFF",
      "Gentoo" = "#FFFF00"
    )
  ) +
  theme_minimal(base_size = 14) +
  theme(
    # Plot Title
    plot.title = element_text(
      face = "bold", size = 22, color = "#32FF00", hjust = 0.5
    ),
    plot.subtitle = element_text(
      size = 16, color = "#32FF00", hjust = 0.5
    ),
    plot.caption = element_text(
      size = 16, color = "#32FF00"
    ),
    # Background
    panel.background = element_rect(fill = "#FFA500", color = NA),
    plot.background = element_rect(fill = "#000000"),
    strip.background = element_rect(fill = "#00FF00", color = NA),
    strip.text = element_text(color = "#FF0000", face = "bold"),
    # Legend
    legend.background = element_rect(fill = "#0000FF"),
    legend.key = element_rect(fill = "#00FF00"),
    # Axis
    axis.title = element_text(size = 14, color = "#FFFFFF"),
    axis.text = element_text(color = "#FFFF00"),
  ) +
  labs(
    title = "Flipper Length Density",
    subtitle = "by Species and Island",
    x = "Flipper Length (mm)",
    y = "Density",
    caption = "The Source (TM)"
  )
  

```

